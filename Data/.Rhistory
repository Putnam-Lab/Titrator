## Load packages
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyverse)
library(lubridate) # used for converting 8 digit date into datetime format for R
library(RColorBrewer)
library(rmarkdown)
library(tinytex)
## If seacarb needs to be downloaded:
#packageurl <- "https://cran.r-project.org/src/contrib/Archive/seacarb/seacarb_3.2.tar.gz"
#install.packages(packageurl, repos = NULL, type = "source")
#install.packages("seacarb")
library(seacarb)
## Load data
```{r}
## Read in data
daily <- read.csv("../Data/Daily_measurements_tracking.csv")
head(daily)
tail(daily) # check to make sure data from today is there
## Swap blue_tank1 and 2 for BT 1/2
daily$Tank_ID <- ifelse(daily$Tank_ID == "blue_tank1" | daily$Tank_ID == "blue_tank2", "BT 1/2", daily$Tank_ID)
## Swap blue_tank3 and 4 for BT 3/4
daily$Tank_ID <- ifelse(daily$Tank_ID == "blue_tank3" | daily$Tank_ID == "blue_tank4", "BT 3/4", daily$Tank_ID)
## Swap quarantine_tank for QT
daily$Tank_ID <- ifelse(daily$Tank_ID == "quarantine_tank", "QT", daily$Tank_ID)
# Load TA measurements data
TA <- read.csv("../Data/CBLS_Aquarium_TA.csv")
# Rename the "SampleID" column to "Tank_ID"
TA.mod <- TA %>%
rename(Tank_ID = SampleID)
# Filter rows for specific Tank_ID values ("header_tank", "BT 1/2", "BT 3/4")
selected_tanks <- c("header_tank", "BT 1/2", "BT 3/4", "QT")
filtered_data <- TA.mod %>%
filter(Tank_ID %in% selected_tanks)
# Select only the desired columns
filtered_data_subset <- filtered_data %>%
select(Date, Tank_ID, TA)
# Select only the desired columns
filtered_data_subset <- filtered_data %>%
select(Date, Tank_ID, TA)
Set dates as characters (needs to be done for merging with the tris calibration file)
Combine TA data frame and daily measurments
Probe Set 1 (for the header, all corals, and for the non-quarantine tank)
range(na.omit(daily.probe1$Temperature_C))
range(na.omit(daily.probe1$pH_mv))
range(na.omit(daily.probe1$Salinity_psu))
daily.probe2 <- daily %>%
filter(Probe.Set == "Probe2")
range(na.omit(daily.probe2$Temperature_C))
range(na.omit(daily.probe2$pH_mv))
range(na.omit(daily.probe2$Salinity_psu))
## Calculate total pH from Probe Set 1
Calculate the calibration curve from the Tris calibration and calculate pH on the total scale from pH.mV.
pHSlope.probe1 <- pHcalib %>%
group_by(tris.date) %>%
nest() %>%
mutate(fitpH = map(data, ~ lm(mVTris ~ TTris, data = .x))) %>%
mutate(tidy_fit = map(fitpH, broom::tidy)) %>%
unnest(tidy_fit) %>%
select(tris.date, term, estimate) %>%
pivot_wider(names_from = term, values_from = estimate) %>%
left_join(daily.probe1, ., by = "tris.date") %>%
mutate(mVTris = Temperature_C * TTris + `(Intercept)`)
pHSlope.probe1 <- pHSlope.probe1 %>%
mutate(pH.total = seacarb::pH(Ex = pH_mv, Etris = mVTris, S=Salinity_psu, T=Temperature_C))
pHSlope.probe1 <- pHSlope.probe1 %>%
mutate(pH.total = seacarb::pH(Ex = pH_mv, Etris = mVTris, S=Salinity_psu, T=Temperature_C))
## Calculate total pH from Probe Set 2
Probe Set 2 (for the header, all corals, and for the non-quarantine tank)
Calculate the calibration curve from the Tris calibration and calculate pH on the total scale from pH.mV.
pHSlope.probe2 <- pHcalib2 %>%
group_by(tris.date) %>%
nest() %>%
mutate(fitpH = map(data, ~ lm(mVTris ~ TTris, data = .x))) %>%
mutate(tidy_fit = map(fitpH, broom::tidy)) %>%
unnest(tidy_fit) %>%
select(tris.date, term, estimate) %>%
pivot_wider(names_from = term, values_from = estimate) %>%
left_join(daily.probe2, ., by = "tris.date") %>%
mutate(mVTris = Temperature_C * TTris + `(Intercept)`)
range(pHSlope.probe2$Temperature_C)
pHSlope.probe2 <- pHSlope.probe2 %>% filter(!is.na(Temperature_C))
range(pHSlope.probe2$Temperature_C)
range(pHSlope.probe2$pH_mv)
pHSlope.probe2 <- pHSlope.probe2 %>% filter(!is.na(pH_mv))
range(pHSlope.probe2$pH_mv)
range(pHSlope.probe2$Salinity_psu)
pHSlope.probe2 <- pHSlope.probe2 %>% filter(!is.na(Salinity_psu))
range(pHSlope.probe2$Salinity_psu)
range(pHSlope.probe2$pH_mv)
pHSlope.probe2 <- pHSlope.probe2 %>% filter(!is.na(pH_mv))
range(pHSlope.probe2$pH_mv)
range(pHSlope.probe2$mVTris)
pHSlope.probe2 <- pHSlope.probe2 %>% filter(!is.na(mVTris))
range(pHSlope.probe2$mVTris)
Join Probe 1 and Probe 2 Sets
pHSlope.probe2 <- pHSlope.probe2 %>%
Convert date to ymd for plotting
pHSlope <- pHSlope %>% relocate("pH.total", .after = Salinity_psu) %>%
relocate(pH_mv, .after = pH.total)
## Change to long format
Change data format to long format
Filter by relevant dates if needed
## Plot
Make a list of dataframes, each containing a horizontal line that will correspond to the upper and lower threshold of each parameter (temperature, salinity, pH total)
Plot all dates
daily_tank<-pHSlope.long %>%
ggplot(aes(x=Date, y=value, colour=Tank_ID))+
geom_point(size=2)+
xlab("Date")+
facet_grid(factor(metric,c("Calcium_ppm","TA_dKH","TA","pH.total","Salinity_psu","Temperature_C")) ~ ., scales = "free", labeller = as_labeller(facet_labels))+
geom_hline(data = hlines_data[[1]], aes(yintercept = yintercept), linetype = "dashed") +
geom_hline(data = hlines_data[[2]], aes(yintercept = yintercept), linetype = "dashed") +
geom_hline(data = hlines_data[[3]], aes(yintercept = yintercept), linetype = "dashed") +
geom_hline(data = hlines_data[[4]], aes(yintercept = yintercept), linetype = "dashed") +
geom_hline(data = hlines_data[[5]], aes(yintercept = yintercept), linetype = "dashed") +
geom_hline(data = hlines_data[[6]], aes(yintercept = yintercept), linetype = "dashed") +
geom_hline(data = hlines_data[[7]], aes(yintercept = yintercept), linetype = "dashed") +
geom_hline(data = hlines_data[[8]], aes(yintercept = yintercept), linetype = "dashed") +
geom_hline(data = hlines_data[[9]], aes(yintercept = yintercept), linetype = "dashed") +
geom_hline(data = hlines_data[[10]], aes(yintercept = yintercept), linetype = "dashed") +
theme_bw() +
theme(text = element_text(size = 14)); daily_tank
install.packages("ggpp")
install.packages("ggplot2")
Sys.which("make")
Sys.which("make")
Sys.which("make")
R.Version()$version.string
R.version()
setwd("C:/PUTNAM LAB/Titrator/Data")
## <<<<<<< HEAD
massfile<-"Mass_20250714_CRM.csv" # name of your file with masses
titrationfile<-'20250714_CBLS_CRM.csv'# name of the last titration file run
date<-'20250714' #date that data was run
path<-"C:/PUTNAM LAB/Titrator/Data/BlueTank_Titrations/20250714" #the location of all your titration files, your folder of the day!
Mass<-read.csv(file.path(path,massfile), header=T, sep=",", na.string="NA", as.is=T)
pHCal<-read.csv("C:/PUTNAM LAB/Titrator/Data/pHCalibration.csv") # read in the pH Calibration file
pHData<-pHCal[pHCal$Date==date,]
mod.pH<-lm(c(pHData$pH4, pHData$pH7, pHData$pH10)~c(4,7,10)) # linear model
png(paste0(path,"/",Sys.Date(),'pHmvplot.png'), height = 400, width = 400)
plot(c(4,7,10), c(pHData$pH4, pHData$pH7, pHData$pH10), xlab = 'pH', ylab = 'mv')
lines(c(4,7,10), predict(mod.pH))
R2<-summary(mod.pH)$r.squared
legend('topright', legend = bquote(R^2 == .(format(R2, digits = 3))), bty='n')
dev.off()
pH35<-mod.pH$coefficients[1]+mod.pH$coefficients[2]*3.5
pH3<-mod.pH$coefficients[1]+mod.pH$coefficients[2]*3
nrows<-nrow(Mass) #need file length/number of rows
TA <- data.frame(matrix(nrow = nrows, ncol = 5)) # changed from 4 columns to 5 LZ 20220720
rownames(TA)<-Mass$Sample.ID1[1:nrows]
colnames(TA)<-c("Date","SampleID",'TA','Mass','Salinity') # added date column LZ 20220720
filename<-file.path(path,titrationfile)
AllData<-read.csv(filename, sep=",", na.string="NA", as.is=T, skip=4)[ ,1:5]
#Identifies rows starting with scope in column 1 of the titration file
sample_name_positions <- c(1,grep("^Scope", AllData[,1]), nrow(AllData))
## parse through all the data in the one file ###
sample_names<-Mass$Sample.ID1
# create a list with all the sample IDs
sample_names_list <- list()
for (item in 1:length(sample_names)){
sample_names_list[[item]] <- sample_names[item]
}
# fill the list with the data from each sample
for (i in 1:nrows){
sample_names_list[[i]]<-data.frame(AllData[sample_name_positions[i]:sample_name_positions[i+1],])
colnames(sample_names_list[[i]])<-c("Volume","Time","mV","Temperature","dV/dt")
}
for(i in 1:nrows) {
#  Data<-read.csv(file.names[i], header=F, sep=",", na.string="NA",as.is=T, skip=10)[ ,1:5]
# colnames(Data) <-  c("Volume","Time",	"mV",	"Temperature",	"dV/dt")
Data<-sample_names_list[[i]]
# everything was brought in as a character because of the second line, converts back to numeric
Data$mV<-suppressWarnings(as.numeric(Data$mV)) ## supress the warnings since NA will be produced
Data$Temperature<-suppressWarnings(as.numeric(Data$Temperature))
Data$Volume<-suppressWarnings(as.numeric(Data$Volume))
#name of the file without .csv
#name<-unlist(strsplit(file.names[i], split='.', fixed=TRUE))[1]
name<-sample_names[i]
#calculates the index of values between pH 2 and 3.5
mV<-which(Data$mV<pH3 & Data$mV>pH35)
#CHANGE ONLY WHEN NEW BOTTLE OF ACID IS USED----------------------------------
#density of your titrant: change every time acid is changed
#Batch A16 changed on 20190731 by SJG, SIlbiger used same batch
#d<-(-0.00000410*mean(Data$Temperature[mV], na.rm=T)^2-0.0001065*mean(Data$Temperature[mV], na.rm=T)+1.02884) #20190731 Batch A16
#Danielle Becker updated script and changed acid to new batch #A22 on 20220127
#d <- (-0.00000400*mean(Data$Temperature[mV], na.rm=T)^2-0.0001116*mean(Data$Temperature[mV], na.rm=T)+1.02881) #20220127 Batch A22 DMBP
#Florence Fields updated script on 20241008 with the current batch opened 20240613 #A24
#d <- (-0.00000410*mean(Data$Temperature[mV], na.rm=T)^2-0.0001069*mean(Data$Temperature[mV], na.rm=T)+1.02881) #20240613 Batch A24 FF
#Pooja Pednekar updated script on 20250714 with the new batch opened on 20250714 by HP #A14
d <- (-0.0000037*mean(Data$Temperature[mV], na.rm=T)^2-0.0001233*mean(Data$Temperature[mV], na.rm=T)+1.02900) #20250714 Batch A14 PP
#concentration of your titrant: CHANGE EVERYTIME ACID IS CHANGED
#c<-0.100010 ##Batch A16 first used by SJG on 20190731
#c<-0.100347 ##Batch A22 first used by DMBP on 20220127
#c<-0.099922 ##Batch A24 currently in use since 20240613 -FF
c<-0.100183 ##Batch A14 currently in use since 20250714 PP
#------------------------------------------------------------------------------
#Salinity of your samples, set salinity for all titrations using a junk or CRM (single value)
s<-Mass[Mass$Sample.ID1==name,3]
#s<-Mass[name,2]
#mass of sample in g: changed with every sample
#mass<-Mass[name,1]
mass<-Mass[Mass$Sample.ID1==name,2]
#sample.index<-Mass[Mass$Sample.ID1==name,3]# this is the order that the sample was run
#-------------------------------------------------------------------
#Calculate TA
#at function is based on code in seacarb package by Steve Comeau, Heloise Lavigne and Jean-Pierre Gattuso
TA[i,1]<-date #exports the date into output file, column 1; added by LZ 20220720
TA[i,2]<-name #exports the sample ID into output file, column 2
TA[i,3]<-1000000*at(S=s,T=mean(Data$Temperature[mV], na.rm=T), C=c, d=d, pHTris=NULL, ETris=NULL, weight=mass, E=Data$mV[mV], volume=Data$Volume[mV])
TA[i,4]<-mass #exports the mass into the TA output file, column 4
TA[i,5]<-s #exports the salinity column into the output file, column 5
}
install.packages("remotes")  # if not already installed
remotes::install_version("seacarb", version = "3.2.14", repos = "http://cran.us.r-project.org")
# create a list with all the sample IDs
sample_names_list <- list()
for (item in 1:length(sample_names)){
sample_names_list[[item]] <- sample_names[item]
}
# fill the list with the data from each sample
for (i in 1:nrows){
sample_names_list[[i]]<-data.frame(AllData[sample_name_positions[i]:sample_name_positions[i+1],])
colnames(sample_names_list[[i]])<-c("Volume","Time","mV","Temperature","dV/dt")
}
for(i in 1:nrows) {
#  Data<-read.csv(file.names[i], header=F, sep=",", na.string="NA",as.is=T, skip=10)[ ,1:5]
# colnames(Data) <-  c("Volume","Time",	"mV",	"Temperature",	"dV/dt")
Data<-sample_names_list[[i]]
# everything was brought in as a character because of the second line, converts back to numeric
Data$mV<-suppressWarnings(as.numeric(Data$mV)) ## supress the warnings since NA will be produced
Data$Temperature<-suppressWarnings(as.numeric(Data$Temperature))
Data$Volume<-suppressWarnings(as.numeric(Data$Volume))
#name of the file without .csv
#name<-unlist(strsplit(file.names[i], split='.', fixed=TRUE))[1]
name<-sample_names[i]
#calculates the index of values between pH 2 and 3.5
mV<-which(Data$mV<pH3 & Data$mV>pH35)
#CHANGE ONLY WHEN NEW BOTTLE OF ACID IS USED----------------------------------
#density of your titrant: change every time acid is changed
#Batch A16 changed on 20190731 by SJG, SIlbiger used same batch
#d<-(-0.00000410*mean(Data$Temperature[mV], na.rm=T)^2-0.0001065*mean(Data$Temperature[mV], na.rm=T)+1.02884) #20190731 Batch A16
#Danielle Becker updated script and changed acid to new batch #A22 on 20220127
#d <- (-0.00000400*mean(Data$Temperature[mV], na.rm=T)^2-0.0001116*mean(Data$Temperature[mV], na.rm=T)+1.02881) #20220127 Batch A22 DMBP
#Florence Fields updated script on 20241008 with the current batch opened 20240613 #A24
#d <- (-0.00000410*mean(Data$Temperature[mV], na.rm=T)^2-0.0001069*mean(Data$Temperature[mV], na.rm=T)+1.02881) #20240613 Batch A24 FF
#Pooja Pednekar updated script on 20250714 with the new batch opened on 20250714 by HP #A14
d <- (-0.0000037*mean(Data$Temperature[mV], na.rm=T)^2-0.0001233*mean(Data$Temperature[mV], na.rm=T)+1.02900) #20250714 Batch A14 PP
#concentration of your titrant: CHANGE EVERYTIME ACID IS CHANGED
#c<-0.100010 ##Batch A16 first used by SJG on 20190731
#c<-0.100347 ##Batch A22 first used by DMBP on 20220127
#c<-0.099922 ##Batch A24 currently in use since 20240613 -FF
c<-0.100183 ##Batch A14 currently in use since 20250714 PP
#------------------------------------------------------------------------------
#Salinity of your samples, set salinity for all titrations using a junk or CRM (single value)
s<-Mass[Mass$Sample.ID1==name,3]
#s<-Mass[name,2]
#mass of sample in g: changed with every sample
#mass<-Mass[name,1]
mass<-Mass[Mass$Sample.ID1==name,2]
#sample.index<-Mass[Mass$Sample.ID1==name,3]# this is the order that the sample was run
#-------------------------------------------------------------------
#Calculate TA
#at function is based on code in seacarb package by Steve Comeau, Heloise Lavigne and Jean-Pierre Gattuso
#install.packages("remotes")  # if not already installed
remotes::install_version("seacarb", version = "3.2.14", repos = "http://cran.us.r-project.org")
TA[i,1]<-date #exports the date into output file, column 1; added by LZ 20220720
TA[i,2]<-name #exports the sample ID into output file, column 2
TA[i,3]<-1000000*at(S=s,T=mean(Data$Temperature[mV], na.rm=T), C=c, d=d, pHTris=NULL, ETris=NULL, weight=mass, E=Data$mV[mV], volume=Data$Volume[mV])
TA[i,4]<-mass #exports the mass into the TA output file, column 4
TA[i,5]<-s #exports the salinity column into the output file, column 5
}
install.packages("remotes")  # if not already installed
remotes::install_version("seacarb", version = "3.2.14", repos = "http://cran.us.r-project.org")
install.packages("remotes")
# fill the list with the data from each sample
for (i in 1:nrows){
sample_names_list[[i]]<-data.frame(AllData[sample_name_positions[i]:sample_name_positions[i+1],])
colnames(sample_names_list[[i]])<-c("Volume","Time","mV","Temperature","dV/dt")
}
for(i in 1:nrows) {
#  Data<-read.csv(file.names[i], header=F, sep=",", na.string="NA",as.is=T, skip=10)[ ,1:5]
# colnames(Data) <-  c("Volume","Time",	"mV",	"Temperature",	"dV/dt")
Data<-sample_names_list[[i]]
# everything was brought in as a character because of the second line, converts back to numeric
Data$mV<-suppressWarnings(as.numeric(Data$mV)) ## supress the warnings since NA will be produced
Data$Temperature<-suppressWarnings(as.numeric(Data$Temperature))
Data$Volume<-suppressWarnings(as.numeric(Data$Volume))
#name of the file without .csv
#name<-unlist(strsplit(file.names[i], split='.', fixed=TRUE))[1]
name<-sample_names[i]
#calculates the index of values between pH 2 and 3.5
mV<-which(Data$mV<pH3 & Data$mV>pH35)
#CHANGE ONLY WHEN NEW BOTTLE OF ACID IS USED----------------------------------
#density of your titrant: change every time acid is changed
#Batch A16 changed on 20190731 by SJG, SIlbiger used same batch
#d<-(-0.00000410*mean(Data$Temperature[mV], na.rm=T)^2-0.0001065*mean(Data$Temperature[mV], na.rm=T)+1.02884) #20190731 Batch A16
#Danielle Becker updated script and changed acid to new batch #A22 on 20220127
#d <- (-0.00000400*mean(Data$Temperature[mV], na.rm=T)^2-0.0001116*mean(Data$Temperature[mV], na.rm=T)+1.02881) #20220127 Batch A22 DMBP
#Florence Fields updated script on 20241008 with the current batch opened 20240613 #A24
#d <- (-0.00000410*mean(Data$Temperature[mV], na.rm=T)^2-0.0001069*mean(Data$Temperature[mV], na.rm=T)+1.02881) #20240613 Batch A24 FF
#Pooja Pednekar updated script on 20250714 with the new batch opened on 20250714 by HP #A14
d <- (-0.0000037*mean(Data$Temperature[mV], na.rm=T)^2-0.0001233*mean(Data$Temperature[mV], na.rm=T)+1.02900) #20250714 Batch A14 PP
#concentration of your titrant: CHANGE EVERYTIME ACID IS CHANGED
#c<-0.100010 ##Batch A16 first used by SJG on 20190731
#c<-0.100347 ##Batch A22 first used by DMBP on 20220127
#c<-0.099922 ##Batch A24 currently in use since 20240613 -FF
c<-0.100183 ##Batch A14 currently in use since 20250714 PP
#------------------------------------------------------------------------------
#Salinity of your samples, set salinity for all titrations using a junk or CRM (single value)
s<-Mass[Mass$Sample.ID1==name,3]
#s<-Mass[name,2]
#mass of sample in g: changed with every sample
#mass<-Mass[name,1]
mass<-Mass[Mass$Sample.ID1==name,2]
#sample.index<-Mass[Mass$Sample.ID1==name,3]# this is the order that the sample was run
#-------------------------------------------------------------------
#Calculate TA
#at function is based on code in seacarb package by Steve Comeau, Heloise Lavigne and Jean-Pierre Gattuso
#install.packages("remotes")  # if not already installed
#remotes::install_version("seacarb", version = "3.2.14", repos = "http://cran.us.r-project.org")
TA[i,1]<-date #exports the date into output file, column 1; added by LZ 20220720
TA[i,2]<-name #exports the sample ID into output file, column 2
TA[i,3]<-1000000*at(S=s,T=mean(Data$Temperature[mV], na.rm=T), C=c, d=d, pHTris=NULL, ETris=NULL, weight=mass, E=Data$mV[mV], volume=Data$Volume[mV])
TA[i,4]<-mass #exports the mass into the TA output file, column 4
TA[i,5]<-s #exports the salinity column into the output file, column 5
}
remove.packages("seacarb")
install.packages("remotes")
remotes::install_version("seacarb", version = "3.2.14", repos = "http://cran.us.r-project.org")
library(seacarb)
# fill the list with the data from each sample
for (i in 1:nrows){
sample_names_list[[i]]<-data.frame(AllData[sample_name_positions[i]:sample_name_positions[i+1],])
colnames(sample_names_list[[i]])<-c("Volume","Time","mV","Temperature","dV/dt")
}
for(i in 1:nrows) {
#  Data<-read.csv(file.names[i], header=F, sep=",", na.string="NA",as.is=T, skip=10)[ ,1:5]
# colnames(Data) <-  c("Volume","Time",	"mV",	"Temperature",	"dV/dt")
Data<-sample_names_list[[i]]
# everything was brought in as a character because of the second line, converts back to numeric
Data$mV<-suppressWarnings(as.numeric(Data$mV)) ## supress the warnings since NA will be produced
Data$Temperature<-suppressWarnings(as.numeric(Data$Temperature))
Data$Volume<-suppressWarnings(as.numeric(Data$Volume))
#name of the file without .csv
#name<-unlist(strsplit(file.names[i], split='.', fixed=TRUE))[1]
name<-sample_names[i]
#calculates the index of values between pH 2 and 3.5
mV<-which(Data$mV<pH3 & Data$mV>pH35)
#CHANGE ONLY WHEN NEW BOTTLE OF ACID IS USED----------------------------------
#density of your titrant: change every time acid is changed
#Batch A16 changed on 20190731 by SJG, SIlbiger used same batch
#d<-(-0.00000410*mean(Data$Temperature[mV], na.rm=T)^2-0.0001065*mean(Data$Temperature[mV], na.rm=T)+1.02884) #20190731 Batch A16
#Danielle Becker updated script and changed acid to new batch #A22 on 20220127
#d <- (-0.00000400*mean(Data$Temperature[mV], na.rm=T)^2-0.0001116*mean(Data$Temperature[mV], na.rm=T)+1.02881) #20220127 Batch A22 DMBP
#Florence Fields updated script on 20241008 with the current batch opened 20240613 #A24
#d <- (-0.00000410*mean(Data$Temperature[mV], na.rm=T)^2-0.0001069*mean(Data$Temperature[mV], na.rm=T)+1.02881) #20240613 Batch A24 FF
#Pooja Pednekar updated script on 20250714 with the new batch opened on 20250714 by HP #A14
d <- (-0.0000037*mean(Data$Temperature[mV], na.rm=T)^2-0.0001233*mean(Data$Temperature[mV], na.rm=T)+1.02900) #20250714 Batch A14 PP
#concentration of your titrant: CHANGE EVERYTIME ACID IS CHANGED
#c<-0.100010 ##Batch A16 first used by SJG on 20190731
#c<-0.100347 ##Batch A22 first used by DMBP on 20220127
#c<-0.099922 ##Batch A24 currently in use since 20240613 -FF
c<-0.100183 ##Batch A14 currently in use since 20250714 PP
#------------------------------------------------------------------------------
#Salinity of your samples, set salinity for all titrations using a junk or CRM (single value)
s<-Mass[Mass$Sample.ID1==name,3]
#s<-Mass[name,2]
#mass of sample in g: changed with every sample
#mass<-Mass[name,1]
mass<-Mass[Mass$Sample.ID1==name,2]
#sample.index<-Mass[Mass$Sample.ID1==name,3]# this is the order that the sample was run
#-------------------------------------------------------------------
#Calculate TA
#at function is based on code in seacarb package by Steve Comeau, Heloise Lavigne and Jean-Pierre Gattuso
#install.packages("remotes")  # if not already installed
#remotes::install_version("seacarb", version = "3.2.14", repos = "http://cran.us.r-project.org")
TA[i,1]<-date #exports the date into output file, column 1; added by LZ 20220720
TA[i,2]<-name #exports the sample ID into output file, column 2
TA[i,3]<-1000000*at(S=s,T=mean(Data$Temperature[mV], na.rm=T), C=c, d=d, pHTris=NULL, ETris=NULL, weight=mass, E=Data$mV[mV], volume=Data$Volume[mV])
TA[i,4]<-mass #exports the mass into the TA output file, column 4
TA[i,5]<-s #exports the salinity column into the output file, column 5
}
TA[,3:4]<-sapply(TA[,3:4], as.numeric) # make sure the appropriate columns are numeric
#exports your data as a CSV file
write.table(TA,paste0(path,"/","TA_Output_",titrationfile),sep=",", row.names=FALSE)
#Cumulative TA
cumu.data <- read.csv("C:/PUTNAM LAB/Titrator/Data/Cumulative_TA_Output.csv", header=TRUE, sep=",")
update.data <- rbind(cumu.data, TA)
#check that your new data has been appended to the cumulative TA dataframe (added 20220623 by LZ)
tail(update.data)
getwd()
#export data as csv file
write.table(update.data,"C:/PUTNAM LAB/Titrator/Data/Cumulative_TA_Output.csv",sep=",", row.names=FALSE)
