# range(pHSlope.probe1$Salinity_psu)
# pHSlope.probe1 <- pHSlope.probe1 %>% filter(!is.na(Salinity_psu))
# range(pHSlope.probe1$Salinity_psu)
#
# range(pHSlope.probe1$pH_mv)
# pHSlope.probe1 <- pHSlope.probe1 %>% filter(!is.na(pH_mv))
# range(pHSlope.probe1$pH_mv)
#
# range(pHSlope.probe1$mVTris)
# pHSlope.probe1 <- pHSlope.probe1 %>% filter(!is.na(mVTris))
# range(pHSlope.probe1$mVTris)
pHSlope.probe1 <- pHSlope.probe1 %>%
mutate(pH.total = seacarb::pH(Ex = pH_mv, Etris = mVTris, S=Salinity_psu, T=Temperature_C))
pHcalib2<-read_csv("../Data/Tris_Calibration_ProbeSet_2.csv")
pHcalib2$tris.date<-as.character(pHcalib2$tris.date)
pHSlope.probe2 <- pHcalib2 %>%
group_by(tris.date) %>%
nest() %>%
mutate(fitpH = map(data, ~ lm(mVTris ~ TTris, data = .x))) %>%
mutate(tidy_fit = map(fitpH, broom::tidy)) %>%
unnest(tidy_fit) %>%
select(tris.date, term, estimate) %>%
pivot_wider(names_from = term, values_from = estimate) %>%
left_join(daily.probe2, ., by = "tris.date") %>%
mutate(mVTris = Temperature_C * TTris + `(Intercept)`)
range(pHSlope.probe2$Temperature_C)
pHSlope.probe2 <- pHSlope.probe2 %>% filter(!is.na(Temperature_C))
range(pHSlope.probe2$Temperature_C)
range(pHSlope.probe2$pH_mv)
pHSlope.probe2 <- pHSlope.probe2 %>% filter(!is.na(pH_mv))
range(pHSlope.probe2$pH_mv)
range(pHSlope.probe2$Salinity_psu)
pHSlope.probe2 <- pHSlope.probe2 %>% filter(!is.na(Salinity_psu))
range(pHSlope.probe2$Salinity_psu)
range(pHSlope.probe2$pH_mv)
pHSlope.probe2 <- pHSlope.probe2 %>% filter(!is.na(pH_mv))
range(pHSlope.probe2$pH_mv)
range(pHSlope.probe2$mVTris)
pHSlope.probe2 <- pHSlope.probe2 %>% filter(!is.na(mVTris))
range(pHSlope.probe2$mVTris)
pHSlope.probe2 <- pHSlope.probe2 %>%
mutate(pH.total = seacarb::pH(Ex = pH_mv, Etris = mVTris, S=Salinity_psu, T=Temperature_C))
pHSlope <- rbind(pHSlope.probe1, pHSlope.probe2)
pHSlope <- pHSlope %>%
filter(!Tank_ID == "quarantine_tank")
pHSlope$Date <- ymd(pHSlope$Date) # convert 8 digit date into datetime format
pHSlope <- pHSlope %>% relocate("pH.total", .after = Salinity_psu) %>%
relocate(pH_mv, .after = pH.total)
head(pHSlope)
# Move "TA" after "pH.total"
pHSlope <- pHSlope %>%
select(Date, Tank_ID, Time, Date.Time, Observer.Initials, Temperature_C, Salinity_psu, pH.total,Calcium_ppm, TA_dKH, TA, pH_mv, Orion_Temp, light2, light3, light4, tris.date, Probe.Set, notes, `(Intercept)`, TTris, mVTris)
pHSlope.long <-pHSlope %>% pivot_longer(cols=Temperature_C:TA,
names_to = "metric",
values_to = "value")
hlines_data <- list(
data.frame(yintercept = 25.5, metric = "Temperature_C"), # lower threshold for temperature in C°
data.frame(yintercept = 26.5, metric = "Temperature_C"), # upper threshold for temperature in C°
data.frame(yintercept = 34.5, metric = "Salinity_psu"), # lower threshold for salinity in psu
data.frame(yintercept = 35.5, metric = "Salinity_psu"), # upper threshold for salinity in psu
data.frame(yintercept = 8.05, metric = "pH.total"), # lower threshold for total pH
data.frame(yintercept = 8.2, metric = "pH.total"), # upper threshold for total pH
data.frame(yintercept = 450, metric = "Calcium_ppm"), # upper threshold for Calcium_ppm
data.frame(yintercept = 300, metric = "Calcium_ppm"), # lower threshold for Calcium_ppm
data.frame(yintercept = 1800.000, metric = "TA"), # lower threshold for TA
data.frame(yintercept = 2500.000, metric = "TA") # upper threshold for TA
)
facet_labels <- unique(pHSlope.long$metric)
names(facet_labels) = facet_labels
facet_labels <- replace(facet_labels, which(facet_labels == "TA"), "TA (µmol kg-1)")
facet_labels <- replace(facet_labels, which(facet_labels == "TA_dKH"), "TA (dKH)")
facet_labels <- replace(facet_labels, which(facet_labels == "Calcium_ppm"), "Calcium (ppm)")
facet_labels <- replace(facet_labels, which(facet_labels == "pH.total"), "pH")
facet_labels <- replace(facet_labels, which(facet_labels == "Salinity_psu"), "Salinity (psu)")
facet_labels <- replace(facet_labels, which(facet_labels == "Temperature_C"), "Temperature (ºC)")
daily_tank<-pHSlope.long %>%
ggplot(aes(x=Date, y=value, colour=Tank_ID))+
geom_point(size=2)+
xlab("Date")+
facet_grid(factor(metric,c("Calcium_ppm","TA_dKH","TA","pH.total","Salinity_psu","Temperature_C")) ~ ., scales = "free", labeller = as_labeller(facet_labels))+
geom_hline(data = hlines_data[[1]], aes(yintercept = yintercept), linetype = "dashed") +
geom_hline(data = hlines_data[[2]], aes(yintercept = yintercept), linetype = "dashed") +
geom_hline(data = hlines_data[[3]], aes(yintercept = yintercept), linetype = "dashed") +
geom_hline(data = hlines_data[[4]], aes(yintercept = yintercept), linetype = "dashed") +
geom_hline(data = hlines_data[[5]], aes(yintercept = yintercept), linetype = "dashed") +
geom_hline(data = hlines_data[[6]], aes(yintercept = yintercept), linetype = "dashed") +
geom_hline(data = hlines_data[[7]], aes(yintercept = yintercept), linetype = "dashed") +
geom_hline(data = hlines_data[[8]], aes(yintercept = yintercept), linetype = "dashed") +
geom_hline(data = hlines_data[[9]], aes(yintercept = yintercept), linetype = "dashed") +
geom_hline(data = hlines_data[[10]], aes(yintercept = yintercept), linetype = "dashed") +
theme_bw() +
theme(text = element_text(size = 14)); daily_tank
# Save plot
ggsave("../Output/Daily_Measurements.pdf", daily_tank, width = 20, height = 15, units = c("in"))
# Filter to the past 180 days
daily_6month <- pHSlope.long %>%
filter(Date >= Sys.Date() - 180)  # Adjust 30 to the number of days you want to consider
# Plot data from the past month
daily_6month_plot <- daily_6month %>%
ggplot(aes(x=Date, y=value, colour=Tank_ID))+
geom_point(size=4)+
xlab("Date")+
facet_grid(factor(metric,c("Calcium_ppm","TA_dKH","TA","pH.total","Salinity_psu","Temperature_C")) ~ ., scales = "free", labeller = as_labeller(facet_labels))+
geom_hline(data = hlines_data[[1]], aes(yintercept = yintercept), linetype = "dashed") +
geom_hline(data = hlines_data[[2]], aes(yintercept = yintercept), linetype = "dashed") +
geom_hline(data = hlines_data[[3]], aes(yintercept = yintercept), linetype = "dashed") +
geom_hline(data = hlines_data[[4]], aes(yintercept = yintercept), linetype = "dashed") +
geom_hline(data = hlines_data[[5]], aes(yintercept = yintercept), linetype = "dashed") +
geom_hline(data = hlines_data[[6]], aes(yintercept = yintercept), linetype = "dashed") +
geom_hline(data = hlines_data[[7]], aes(yintercept = yintercept), linetype = "dashed") +
geom_hline(data = hlines_data[[8]], aes(yintercept = yintercept), linetype = "dashed") +
geom_hline(data = hlines_data[[9]], aes(yintercept = yintercept), linetype = "dashed") +
geom_hline(data = hlines_data[[10]], aes(yintercept = yintercept), linetype = "dashed") +
theme_bw() +
theme(text = element_text(size = 14))
daily_6month_plot
# Save plot
ggsave("../Output/Daily_Measurements_Past_6Months.pdf", daily_6month_plot, width = 20, height = 15, units = c("in"))
# Filter to the past 30 days
daily_month <- pHSlope.long %>%
filter(Date >= Sys.Date() - 30)  # Adjust 30 to the number of days you want to consider
# Plot data from the past month
daily_month_plot <-daily_month %>%
ggplot(aes(x=Date, y=value, colour=Tank_ID))+
geom_point(size=4)+
xlab("Date")+
facet_grid(factor(metric,c("Calcium_ppm","TA_dKH","TA","pH.total","Salinity_psu","Temperature_C")) ~ ., scales = "free", labeller = as_labeller(facet_labels))+
geom_hline(data = hlines_data[[1]], aes(yintercept = yintercept), linetype = "dashed") +
geom_hline(data = hlines_data[[2]], aes(yintercept = yintercept), linetype = "dashed") +
geom_hline(data = hlines_data[[3]], aes(yintercept = yintercept), linetype = "dashed") +
geom_hline(data = hlines_data[[4]], aes(yintercept = yintercept), linetype = "dashed") +
geom_hline(data = hlines_data[[5]], aes(yintercept = yintercept), linetype = "dashed") +
geom_hline(data = hlines_data[[6]], aes(yintercept = yintercept), linetype = "dashed") +
geom_hline(data = hlines_data[[7]], aes(yintercept = yintercept), linetype = "dashed") +
geom_hline(data = hlines_data[[8]], aes(yintercept = yintercept), linetype = "dashed") +
geom_hline(data = hlines_data[[9]], aes(yintercept = yintercept), linetype = "dashed") +
geom_hline(data = hlines_data[[10]], aes(yintercept = yintercept), linetype = "dashed") +
theme_bw() +
theme(text = element_text(size = 14)) + scale_x_date(date_breaks = "1 day", date_labels = "%a\n%b %d")
daily_month_plot
# Save plot
ggsave("../Output/Daily_Measurements_Past_Month.pdf", daily_month_plot, width = 20, height = 15, units = c("in"))
daily_month <- pHSlope %>%
filter(Date >= Sys.Date() - 30)  # Adjust 30 to the number of days you want to consider
summary<-daily_month%>%
group_by(Tank_ID)%>%
#select(!tank)%>%
select(Temperature_C:TA) %>%
summarise(across(everything(), list(mean = mean, sd = sd), na.rm = TRUE)); summary
library(ggrepel)
library(ggpmisc)
pHSlope %>% group_by(Tank_ID,Date,TA_dKH) %>% drop_na(TA) %>% summarize(TA = mean(TA)) %>%
ggplot(aes(x = TA, y = TA_dKH)) +
geom_point(size = 2) + geom_text_repel(aes(label=TA_dKH)) +
geom_smooth(method = "lm", se = FALSE) +  # use linear model (lm) and remove shaded error band
theme_minimal()
pHSlope$Date <- as.factor(pHSlope$Date)
TA_plot <- pHSlope %>%
group_by(Tank_ID, Date, TA_dKH) %>%
drop_na(TA) %>%
summarize(TA = mean(TA), .groups = "drop") %>% drop_na %>% droplevels() %>%
ggplot(aes(x = TA, y = TA_dKH, color=Date)) +
geom_point(size = 2) + geom_smooth(method = "lm", se = FALSE, color = "blue") +
geom_text_repel(aes(label = paste0("TA=", round(TA, 1), "\nTA_dKH=", round(TA_dKH, 1)))) +
stat_poly_eq(aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
formula = y ~ x,
parse = TRUE,
label.x = "left",
label.y = "top",color="black") +
theme_minimal()+
labs(
title = "Relationship Between TA and TA_dKH in Blue Tanks",
x = "Total Alkalinity (TA)",
y = "TA in dKH"
)
ggsave("../Output/TA_dKH_relationship.pdf", TA_plot, width = 7, height = 5, units = c("in"))
install.packages("remotes")  # if not already installed
remotes::install_version("seacarb", version = "3.2.14", repos = "http://cran.us.r-project.org")
library(seacarb)
setwd("C:/PUTNAM LAB/Titrator/Data")
library(tidyverse)
## <<<<<<< HEAD
massfile<-"Mass_20251022_CRM.csv" # name of your file with masses
titrationfile<-'20251022_CBLS_CRM.csv'# name of the last titration file run
date<-'20251022' #date that data was run
path<-"C:/PUTNAM LAB/Titrator/Data/BlueTank_Titrations/20251022" #the location of all your titration files, your folder of the day!
Mass<-read.csv(file.path(path,massfile), header=T, sep=",", na.string="NA", as.is=T)
setwd("C:/PUTNAM LAB/Titrator/Data")
library(tidyverse)
## <<<<<<< HEAD
massfile<-"Mass_20251022_CRM.csv" # name of your file with masses
titrationfile<-'20251022_CBLS_CRM.csv'# name of the last titration file run
date<-'20251022' #date that data was run
path<-"C:/PUTNAM LAB/Titrator/Data/BlueTank_Titrations/20251022" #the location of all your titration files, your folder of the day!
Mass<-read.csv(file.path(path,massfile), header=T, sep=",", na.string="NA", as.is=T)
pHCal<-read.csv("C:/PUTNAM LAB/Titrator/Data/pHCalibration.csv") # read in the pH Calibration file
View(Mass)
View(pHCal)
pHData<-pHCal[pHCal$Date==date,]
mod.pH<-lm(c(pHData$pH4, pHData$pH7, pHData$pH10)~c(4,7,10)) # linear model
png(paste0(path,"/",Sys.Date(),'pHmvplot.png'), height = 400, width = 400)
plot(c(4,7,10), c(pHData$pH4, pHData$pH7, pHData$pH10), xlab = 'pH', ylab = 'mv')
lines(c(4,7,10), predict(mod.pH))
R2<-summary(mod.pH)$r.squared
legend('topright', legend = bquote(R^2 == .(format(R2, digits = 3))), bty='n')
dev.off()
pH35<-mod.pH$coefficients[1]+mod.pH$coefficients[2]*3.5
pH3<-mod.pH$coefficients[1]+mod.pH$coefficients[2]*3
nrows<-nrow(Mass) #need file length/number of rows
TA <- data.frame(matrix(nrow = nrows, ncol = 5)) # changed from 4 columns to 5 LZ 20220720
rownames(TA)<-Mass$Sample.ID1[1:nrows]
colnames(TA)<-c("Date","SampleID",'TA','Mass','Salinity') # added date column LZ 20220720
filename<-file.path(path,titrationfile)
AllData<-read.csv(filename, sep=",", na.string="NA", as.is=T, skip=4)[ ,1:5]
#Identifies rows starting with scope in column 1 of the titration file
sample_name_positions <- c(1,grep("^Scope", AllData[,1]), nrow(AllData))
## parse through all the data in the one file ###
sample_names<-Mass$Sample.ID1
# create a list with all the sample IDs
sample_names_list <- list()
for (item in 1:length(sample_names)){
sample_names_list[[item]] <- sample_names[item]
}
# fill the list with the data from each sample
for (i in 1:nrows){
sample_names_list[[i]]<-data.frame(AllData[sample_name_positions[i]:sample_name_positions[i+1],])
colnames(sample_names_list[[i]])<-c("Volume","Time","mV","Temperature","dV/dt")
}
for(i in 1:nrows) {
#  Data<-read.csv(file.names[i], header=F, sep=",", na.string="NA",as.is=T, skip=10)[ ,1:5]
# colnames(Data) <-  c("Volume","Time",	"mV",	"Temperature",	"dV/dt")
Data<-sample_names_list[[i]]
# everything was brought in as a character because of the second line, converts back to numeric
Data$mV<-suppressWarnings(as.numeric(Data$mV)) ## supress the warnings since NA will be produced
Data$Temperature<-suppressWarnings(as.numeric(Data$Temperature))
Data$Volume<-suppressWarnings(as.numeric(Data$Volume))
#name of the file without .csv
#name<-unlist(strsplit(file.names[i], split='.', fixed=TRUE))[1]
name<-sample_names[i]
#calculates the index of values between pH 2 and 3.5
mV<-which(Data$mV<pH3 & Data$mV>pH35)
#CHANGE ONLY WHEN NEW BOTTLE OF ACID IS USED----------------------------------
#To obtain this information use the Certificate of Analysis from the Andrew Dickson's Labs for respective acid titrant batches.
#For 1(d). For the density of the titrant, you will need three values highlighted in blue (in the script below). In the density section of the certificate, the formula with calculated values have all the values required.
#Formula from the certificate: Density= xa- xb-xc, look below for comparing & inputing the values in the script.
#line 205: d <- (xc*mean(Data$Temperature[mV], na.rm=T)^2-xb*mean(Data$Temperature[mV], na.rm=T)+xa)
#For 2(c).Line 215: The concentration of the acid is obtained from HCl conc.= xxxxxxx ±0.000 006 mol kg^-1."xxxxx" is your value "c" (in the script below)for HCl concentration. If confused, look at the protocol for detailed explanation.
#1. density of your titrant: change every time acid is changed
#d <- (-0.0000037*mean(Data$Temperature[mV], na.rm=T)^2-0.0001233*mean(Data$Temperature[mV], na.rm=T)+1.02900) #20250714 Batch A14 PP
#Batch A16 changed on 20190731 by SJG, SIlbiger used same batch
#d<-(-0.00000410*mean(Data$Temperature[mV], na.rm=T)^2-0.0001065*mean(Data$Temperature[mV], na.rm=T)+1.02884) #20190731 Batch A16
#Danielle Becker updated script and changed acid to new batch #A22 on 20220127
#d <- (-0.00000400*mean(Data$Temperature[mV], na.rm=T)^2-0.0001116*mean(Data$Temperature[mV], na.rm=T)+1.02881) #20220127 Batch A22 DMBP
#Florence Fields updated script on 20241008 with the current batch opened 20240613 #A24
#d <- (-0.00000410*mean(Data$Temperature[mV], na.rm=T)^2-0.0001069*mean(Data$Temperature[mV], na.rm=T)+1.02881) #20240613 Batch A24 FF
#Pooja Pednekar updated script on 20250714 with the new batch opened on 20250714 by HP #A14
d <- (-0.0000037*mean(Data$Temperature[mV], na.rm=T)^2-0.0001233*mean(Data$Temperature[mV], na.rm=T)+1.02900) #20250714 Batch A14 PP
#2. concentration of your titrant: CHANGE EVERYTIME ACID IS CHANGED
#c<-0.100010 ##Batch A16 first used by SJG on 20190731
#c<-0.100347 ##Batch A22 first used by DMBP on 20220127
#c<-0.099922 ##Batch A24 currently in use since 20240613 -FF
c<-0.100183 ##Batch A14 currently in use since 20250714 PP. First used by PP on 20250714
#------------------------------------------------------------------------------
#Salinity of your samples, set salinity for all titrations using a junk or CRM (single value)
s<-Mass[Mass$Sample.ID1==name,3]
#s<-Mass[name,2]
#mass of sample in g: changed with every sample
#mass<-Mass[name,1]
mass<-Mass[Mass$Sample.ID1==name,2]
#sample.index<-Mass[Mass$Sample.ID1==name,3]# this is the order that the sample was run
#-------------------------------------------------------------------
#Calculate TA
#at function is based on code in seacarb package by Steve Comeau, Heloise Lavigne and Jean-Pierre Gattuso
#NOTE: newer versions of the seacarb package have a hard time recognizing the "at" function
## you need to check that the version installed is version 3.2.14, not version 3.3.1 which is the newest version of the "seacarb".
#You can use the below code after uninstalling the current version of seacarb and if need a version 3.2 for the at function
#install.packages("remotes")  # if not already installed
#remotes::install_version("seacarb", version = "3.2.14", repos = "http://cran.us.r-project.org")
#library(seacarb)
TA[i,1]<-date #exports the date into output file, column 1; added by LZ 20220720
TA[i,2]<-name #exports the sample ID into output file, column 2
TA[i,3]<-1000000*at(S=s,T=mean(Data$Temperature[mV], na.rm=T), C=c, d=d, pHTris=NULL, ETris=NULL, weight=mass, E=Data$mV[mV], volume=Data$Volume[mV])
TA[i,4]<-mass #exports the mass into the TA output file, column 4
TA[i,5]<-s #exports the salinity column into the output file, column 5
}
TA[,3:4]<-sapply(TA[,3:4], as.numeric) # make sure the appropriate columns are numeric
#exports your data as a CSV file
write.table(TA,paste0(path,"/","TA_Output_",titrationfile),sep=",", row.names=FALSE)
#Cumulative TA
cumu.data <- read.csv("C:/PUTNAM LAB/Titrator/Data/Cumulative_TA_Output.csv", header=TRUE, sep=",")
update.data <- rbind(cumu.data, TA)
#check that your new data has been appended to the cumulative TA dataframe (added 20220623 by LZ)
tail(update.data)
getwd()
#export data as csv file
write.table(update.data,"C:/PUTNAM LAB/Titrator/Data/Cumulative_TA_Output.csv",sep=",", row.names=FALSE)
## <<<<<<< HEAD
massfile<-"Mass_20251022_Samples.csv" # name of your file with masses
titrationfile<-'20251022_CBLS_Samples.csv'# name of the last titration file run
date<-'20251022' #date that data was run
path<-"C:/PUTNAM LAB/Titrator/Data/BlueTank_Titrations/20251022" #the location of all your titration files, your folder of the day!
## <<<<<<< HEAD
massfile<-"Mass_20251022_Samples.csv" # name of your file with masses
titrationfile<-'20251022_CBLS_Samples.csv'# name of the last titration file run
date<-'20251022' #date that data was run
path<-"C:/PUTNAM LAB/Titrator/Data/BlueTank_Titrations/20251022" #the location of all your titration files, your folder of the day!
Mass<-read.csv(file.path(path,massfile), header=T, sep=",", na.string="NA", as.is=T)
View(Mass)
pHCal<-read.csv("C:/PUTNAM LAB/Titrator/Data/pHCalibration.csv") # read in the pH Calibration file
pHData<-pHCal[pHCal$Date==date,]
mod.pH<-lm(c(pHData$pH4, pHData$pH7, pHData$pH10)~c(4,7,10)) # linear model
png(paste0(path,"/",Sys.Date(),'pHmvplot.png'), height = 400, width = 400)
plot(c(4,7,10), c(pHData$pH4, pHData$pH7, pHData$pH10), xlab = 'pH', ylab = 'mv')
lines(c(4,7,10), predict(mod.pH))
R2<-summary(mod.pH)$r.squared
legend('topright', legend = bquote(R^2 == .(format(R2, digits = 3))), bty='n')
dev.off()
pH35<-mod.pH$coefficients[1]+mod.pH$coefficients[2]*3.5
pH3<-mod.pH$coefficients[1]+mod.pH$coefficients[2]*3
nrows<-nrow(Mass) #need file length/number of rows
TA <- data.frame(matrix(nrow = nrows, ncol = 5)) # changed from 4 columns to 5 LZ 20220720
rownames(TA)<-Mass$Sample.ID1[1:nrows]
colnames(TA)<-c("Date","SampleID",'TA','Mass','Salinity') # added date column LZ 20220720
filename<-file.path(path,titrationfile)
AllData<-read.csv(filename, sep=",", na.string="NA", as.is=T, skip=4)[ ,1:5]
#Identifies rows starting with scope in column 1 of the titration file
sample_name_positions <- c(1,grep("^Scope", AllData[,1]), nrow(AllData))
## parse through all the data in the one file ###
sample_names<-Mass$Sample.ID1
# create a list with all the sample IDs
sample_names_list <- list()
for (item in 1:length(sample_names)){
sample_names_list[[item]] <- sample_names[item]
}
# fill the list with the data from each sample
for (i in 1:nrows){
sample_names_list[[i]]<-data.frame(AllData[sample_name_positions[i]:sample_name_positions[i+1],])
colnames(sample_names_list[[i]])<-c("Volume","Time","mV","Temperature","dV/dt")
}
for(i in 1:nrows) {
#  Data<-read.csv(file.names[i], header=F, sep=",", na.string="NA",as.is=T, skip=10)[ ,1:5]
# colnames(Data) <-  c("Volume","Time",	"mV",	"Temperature",	"dV/dt")
Data<-sample_names_list[[i]]
# everything was brought in as a character because of the second line, converts back to numeric
Data$mV<-suppressWarnings(as.numeric(Data$mV)) ## supress the warnings since NA will be produced
Data$Temperature<-suppressWarnings(as.numeric(Data$Temperature))
Data$Volume<-suppressWarnings(as.numeric(Data$Volume))
#name of the file without .csv
#name<-unlist(strsplit(file.names[i], split='.', fixed=TRUE))[1]
name<-sample_names[i]
#calculates the index of values between pH 2 and 3.5
mV<-which(Data$mV<pH3 & Data$mV>pH35)
#CHANGE ONLY WHEN NEW BOTTLE OF ACID IS USED----------------------------------
#To obtain this information use the Certificate of Analysis from the Andrew Dickson's Labs for respective acid titrant batches.
#For 1(d). For the density of the titrant, you will need three values highlighted in blue (in the script below). In the density section of the certificate, the formula with calculated values have all the values required.
#Formula from the certificate: Density= xa- xb-xc, look below for comparing & inputing the values in the script.
#line 205: d <- (xc*mean(Data$Temperature[mV], na.rm=T)^2-xb*mean(Data$Temperature[mV], na.rm=T)+xa)
#For 2(c).Line 215: The concentration of the acid is obtained from HCl conc.= xxxxxxx ±0.000 006 mol kg^-1."xxxxx" is your value "c" (in the script below)for HCl concentration. If confused, look at the protocol for detailed explanation.
#1. density of your titrant: change every time acid is changed
#d <- (-0.0000037*mean(Data$Temperature[mV], na.rm=T)^2-0.0001233*mean(Data$Temperature[mV], na.rm=T)+1.02900) #20250714 Batch A14 PP
#Batch A16 changed on 20190731 by SJG, SIlbiger used same batch
#d<-(-0.00000410*mean(Data$Temperature[mV], na.rm=T)^2-0.0001065*mean(Data$Temperature[mV], na.rm=T)+1.02884) #20190731 Batch A16
#Danielle Becker updated script and changed acid to new batch #A22 on 20220127
#d <- (-0.00000400*mean(Data$Temperature[mV], na.rm=T)^2-0.0001116*mean(Data$Temperature[mV], na.rm=T)+1.02881) #20220127 Batch A22 DMBP
#Florence Fields updated script on 20241008 with the current batch opened 20240613 #A24
#d <- (-0.00000410*mean(Data$Temperature[mV], na.rm=T)^2-0.0001069*mean(Data$Temperature[mV], na.rm=T)+1.02881) #20240613 Batch A24 FF
#Pooja Pednekar updated script on 20250714 with the new batch opened on 20250714 by HP #A14
d <- (-0.0000037*mean(Data$Temperature[mV], na.rm=T)^2-0.0001233*mean(Data$Temperature[mV], na.rm=T)+1.02900) #20250714 Batch A14 PP
#2. concentration of your titrant: CHANGE EVERYTIME ACID IS CHANGED
#c<-0.100010 ##Batch A16 first used by SJG on 20190731
#c<-0.100347 ##Batch A22 first used by DMBP on 20220127
#c<-0.099922 ##Batch A24 currently in use since 20240613 -FF
c<-0.100183 ##Batch A14 currently in use since 20250714 PP. First used by PP on 20250714
#------------------------------------------------------------------------------
#Salinity of your samples, set salinity for all titrations using a junk or CRM (single value)
s<-Mass[Mass$Sample.ID1==name,3]
#s<-Mass[name,2]
#mass of sample in g: changed with every sample
#mass<-Mass[name,1]
mass<-Mass[Mass$Sample.ID1==name,2]
#sample.index<-Mass[Mass$Sample.ID1==name,3]# this is the order that the sample was run
#-------------------------------------------------------------------
#Calculate TA
#at function is based on code in seacarb package by Steve Comeau, Heloise Lavigne and Jean-Pierre Gattuso
#NOTE: newer versions of the seacarb package have a hard time recognizing the "at" function
## you need to check that the version installed is version 3.2.14, not version 3.3.1 which is the newest version of the "seacarb".
#You can use the below code after uninstalling the current version of seacarb and if need a version 3.2 for the at function
#install.packages("remotes")  # if not already installed
#remotes::install_version("seacarb", version = "3.2.14", repos = "http://cran.us.r-project.org")
#library(seacarb)
TA[i,1]<-date #exports the date into output file, column 1; added by LZ 20220720
TA[i,2]<-name #exports the sample ID into output file, column 2
TA[i,3]<-1000000*at(S=s,T=mean(Data$Temperature[mV], na.rm=T), C=c, d=d, pHTris=NULL, ETris=NULL, weight=mass, E=Data$mV[mV], volume=Data$Volume[mV])
TA[i,4]<-mass #exports the mass into the TA output file, column 4
TA[i,5]<-s #exports the salinity column into the output file, column 5
}
TA[,3:4]<-sapply(TA[,3:4], as.numeric) # make sure the appropriate columns are numeric
#exports your data as a CSV file
write.table(TA,paste0(path,"/","TA_Output_",titrationfile),sep=",", row.names=FALSE)
#Cumulative TA
cumu.data <- read.csv("C:/PUTNAM LAB/Titrator/Data/Cumulative_TA_Output.csv", header=TRUE, sep=",")
update.data <- rbind(cumu.data, TA)
#check that your new data has been appended to the cumulative TA dataframe (added 20220623 by LZ)
tail(update.data)
getwd()
#export data as csv file
write.table(update.data,"C:/PUTNAM LAB/Titrator/Data/Cumulative_TA_Output.csv",sep=",", row.names=FALSE)
## <<<<<<< HEAD
massfile<-"Mass_20251022_Samples.csv" # name of your file with masses
titrationfile<-'20251022_CBLS_Samples.csv'# name of the last titration file run
date<-'20251022' #date that data was run
path<-"C:/PUTNAM LAB/Titrator/Data/BlueTank_Titrations/20251022" #the location of all your titration files, your folder of the day!
Mass<-read.csv(file.path(path,massfile), header=T, sep=",", na.string="NA", as.is=T)
pHCal<-read.csv("C:/PUTNAM LAB/Titrator/Data/pHCalibration.csv") # read in the pH Calibration file
pHData<-pHCal[pHCal$Date==date,]
mod.pH<-lm(c(pHData$pH4, pHData$pH7, pHData$pH10)~c(4,7,10)) # linear model
png(paste0(path,"/",Sys.Date(),'pHmvplot.png'), height = 400, width = 400)
plot(c(4,7,10), c(pHData$pH4, pHData$pH7, pHData$pH10), xlab = 'pH', ylab = 'mv')
lines(c(4,7,10), predict(mod.pH))
R2<-summary(mod.pH)$r.squared
legend('topright', legend = bquote(R^2 == .(format(R2, digits = 3))), bty='n')
dev.off()
pH35<-mod.pH$coefficients[1]+mod.pH$coefficients[2]*3.5
pH3<-mod.pH$coefficients[1]+mod.pH$coefficients[2]*3
nrows<-nrow(Mass) #need file length/number of rows
TA <- data.frame(matrix(nrow = nrows, ncol = 5)) # changed from 4 columns to 5 LZ 20220720
rownames(TA)<-Mass$Sample.ID1[1:nrows]
colnames(TA)<-c("Date","SampleID",'TA','Mass','Salinity') # added date column LZ 20220720
filename<-file.path(path,titrationfile)
AllData<-read.csv(filename, sep=",", na.string="NA", as.is=T, skip=4)[ ,1:5]
#Identifies rows starting with scope in column 1 of the titration file
sample_name_positions <- c(1,grep("^Scope", AllData[,1]), nrow(AllData))
## parse through all the data in the one file ###
sample_names<-Mass$Sample.ID1
# create a list with all the sample IDs
sample_names_list <- list()
for (item in 1:length(sample_names)){
sample_names_list[[item]] <- sample_names[item]
}
# fill the list with the data from each sample
for (i in 1:nrows){
sample_names_list[[i]]<-data.frame(AllData[sample_name_positions[i]:sample_name_positions[i+1],])
colnames(sample_names_list[[i]])<-c("Volume","Time","mV","Temperature","dV/dt")
}
for(i in 1:nrows) {
#  Data<-read.csv(file.names[i], header=F, sep=",", na.string="NA",as.is=T, skip=10)[ ,1:5]
# colnames(Data) <-  c("Volume","Time",	"mV",	"Temperature",	"dV/dt")
Data<-sample_names_list[[i]]
# everything was brought in as a character because of the second line, converts back to numeric
Data$mV<-suppressWarnings(as.numeric(Data$mV)) ## supress the warnings since NA will be produced
Data$Temperature<-suppressWarnings(as.numeric(Data$Temperature))
Data$Volume<-suppressWarnings(as.numeric(Data$Volume))
#name of the file without .csv
#name<-unlist(strsplit(file.names[i], split='.', fixed=TRUE))[1]
name<-sample_names[i]
#calculates the index of values between pH 2 and 3.5
mV<-which(Data$mV<pH3 & Data$mV>pH35)
#CHANGE ONLY WHEN NEW BOTTLE OF ACID IS USED----------------------------------
#To obtain this information use the Certificate of Analysis from the Andrew Dickson's Labs for respective acid titrant batches.
#For 1(d). For the density of the titrant, you will need three values highlighted in blue (in the script below). In the density section of the certificate, the formula with calculated values have all the values required.
#Formula from the certificate: Density= xa- xb-xc, look below for comparing & inputing the values in the script.
#line 205: d <- (xc*mean(Data$Temperature[mV], na.rm=T)^2-xb*mean(Data$Temperature[mV], na.rm=T)+xa)
#For 2(c).Line 215: The concentration of the acid is obtained from HCl conc.= xxxxxxx ±0.000 006 mol kg^-1."xxxxx" is your value "c" (in the script below)for HCl concentration. If confused, look at the protocol for detailed explanation.
#1. density of your titrant: change every time acid is changed
#d <- (-0.0000037*mean(Data$Temperature[mV], na.rm=T)^2-0.0001233*mean(Data$Temperature[mV], na.rm=T)+1.02900) #20250714 Batch A14 PP
#Batch A16 changed on 20190731 by SJG, SIlbiger used same batch
#d<-(-0.00000410*mean(Data$Temperature[mV], na.rm=T)^2-0.0001065*mean(Data$Temperature[mV], na.rm=T)+1.02884) #20190731 Batch A16
#Danielle Becker updated script and changed acid to new batch #A22 on 20220127
#d <- (-0.00000400*mean(Data$Temperature[mV], na.rm=T)^2-0.0001116*mean(Data$Temperature[mV], na.rm=T)+1.02881) #20220127 Batch A22 DMBP
#Florence Fields updated script on 20241008 with the current batch opened 20240613 #A24
#d <- (-0.00000410*mean(Data$Temperature[mV], na.rm=T)^2-0.0001069*mean(Data$Temperature[mV], na.rm=T)+1.02881) #20240613 Batch A24 FF
#Pooja Pednekar updated script on 20250714 with the new batch opened on 20250714 by HP #A14
d <- (-0.0000037*mean(Data$Temperature[mV], na.rm=T)^2-0.0001233*mean(Data$Temperature[mV], na.rm=T)+1.02900) #20250714 Batch A14 PP
#2. concentration of your titrant: CHANGE EVERYTIME ACID IS CHANGED
#c<-0.100010 ##Batch A16 first used by SJG on 20190731
#c<-0.100347 ##Batch A22 first used by DMBP on 20220127
#c<-0.099922 ##Batch A24 currently in use since 20240613 -FF
c<-0.100183 ##Batch A14 currently in use since 20250714 PP. First used by PP on 20250714
#------------------------------------------------------------------------------
#Salinity of your samples, set salinity for all titrations using a junk or CRM (single value)
s<-Mass[Mass$Sample.ID1==name,3]
#s<-Mass[name,2]
#mass of sample in g: changed with every sample
#mass<-Mass[name,1]
mass<-Mass[Mass$Sample.ID1==name,2]
#sample.index<-Mass[Mass$Sample.ID1==name,3]# this is the order that the sample was run
#-------------------------------------------------------------------
#Calculate TA
#at function is based on code in seacarb package by Steve Comeau, Heloise Lavigne and Jean-Pierre Gattuso
#NOTE: newer versions of the seacarb package have a hard time recognizing the "at" function
## you need to check that the version installed is version 3.2.14, not version 3.3.1 which is the newest version of the "seacarb".
#You can use the below code after uninstalling the current version of seacarb and if need a version 3.2 for the at function
#install.packages("remotes")  # if not already installed
#remotes::install_version("seacarb", version = "3.2.14", repos = "http://cran.us.r-project.org")
#library(seacarb)
TA[i,1]<-date #exports the date into output file, column 1; added by LZ 20220720
TA[i,2]<-name #exports the sample ID into output file, column 2
TA[i,3]<-1000000*at(S=s,T=mean(Data$Temperature[mV], na.rm=T), C=c, d=d, pHTris=NULL, ETris=NULL, weight=mass, E=Data$mV[mV], volume=Data$Volume[mV])
TA[i,4]<-mass #exports the mass into the TA output file, column 4
TA[i,5]<-s #exports the salinity column into the output file, column 5
}
TA[,3:4]<-sapply(TA[,3:4], as.numeric) # make sure the appropriate columns are numeric
#exports your data as a CSV file
write.table(TA,paste0(path,"/","TA_Output_",titrationfile),sep=",", row.names=FALSE)
#Cumulative TA
cumu.data <- read.csv("C:/PUTNAM LAB/Titrator/Data/Cumulative_TA_Output.csv", header=TRUE, sep=",")
update.data <- rbind(cumu.data, TA)
#check that your new data has been appended to the cumulative TA dataframe (added 20220623 by LZ)
tail(update.data)
getwd()
#export data as csv file
write.table(update.data,"C:/PUTNAM LAB/Titrator/Data/Cumulative_TA_Output.csv",sep=",", row.names=FALSE)
